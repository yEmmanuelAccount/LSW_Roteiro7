agora, modifique as funções dos botões "Adicionar Jogador", "Ver Jogadores" e "Excluir Partida" para que, quando clicados pelo usuário quando clicar em "Adicionar Jogador", a tela aberta deve apresentar campos obrigatórios para preencher as mesmas informações já necessárias.

quando clicar em "Ver Jogadores", a tela aberta deve contar um botão verde para confirmar sua presença e um botão vermelho para excluir o jogador antes adicionado da lista. no final, apresente os arquivos já existentes com os elementos originais e usas modificações.

a seguir estão os arquivos existentes:

index.html {

    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Organizador de Partidas de Futebol</title>
        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
        <!-- Seu CSS personalizado -->
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <div class="container">
            <h1>Organizador de Partidas de Futebol</h1>
            <div class="form-group">
                <label for="matchTitle">Título da Partida:</label>
                <input type="text" class="form-control" id="matchTitle">
            </div>
            <div class="form-group">
                <label for="matchLocation">Local:</label>
                <input type="text" class="form-control" id="matchLocation">
            </div>
            <div class="form-group">
                <label for="matchDate">Data:</label>
                <input type="date" class="form-control" id="matchDate">
            </div>
            <div class="form-group">
                <label for="matchTime">Horário:</label>
                <input type="time" class="form-control" id="matchTime">
            </div>
            <button id="createMatchButton" class="btn btn-primary">Criar Partida</button>
            
            <h2>Partidas Criadas</h2>
            <div id="container">
                <ul id="matchList" class="list-group"></ul>
            </div>          
        </div>
        <!-- Bootstrap JS e dependências -->
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <!-- Seu script personalizado -->
        <script src="app.js"></script>
    </body>
    </html>
}

app.js {
    document.addEventListener('DOMContentLoaded', function() {
        fetchMatches();

        document.querySelector('#createMatchButton').addEventListener('click', function() {
            const title = document.querySelector('#matchTitle').value;
            const location = document.querySelector('#matchLocation').value;
            const date = document.querySelector('#matchDate').value;
            const time = document.querySelector('#matchTime').value;

            fetch('http://localhost:3000/criarPartida', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    titulo: title,
                    local: location,
                    data: date,
                    horario: time
                })
            })
            .then(response => response.text())
            .then(data => {
                alert(data);
                fetchMatches(); 
            })
            .catch(error => console.error('Erro:', error));
        });
        });

        function fetchMatches() {
        fetch('http://localhost:3000/partidas')
        .then(response => response.json())
        .then(partidas => {
            const matchList = document.querySelector('#matchList');
            matchList.innerHTML = '';
            partidas.forEach((partida, index) => {
                const listItem = document.createElement('li');
                listItem.classList.add('list-group-item', 'match-item');
                listItem.innerHTML = `
                    <div class="match-header">
                        <span>${partida.titulo} - ${partida.local} - ${partida.data} - ${partida.horario}</span>
                        <button class="btn btn-secondary btn-sm toggle-btn">▼</button>
                    </div>
                    <div class="match-options" style="display: none;">
                        <button class="btn btn-primary btn-sm" onclick="addPlayer(${index})">Adicionar Jogador</button>
                        <button class="btn btn-info btn-sm" onclick="viewPlayers(${index})">Ver Jogadores</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteMatch(${index})">Excluir Partida</button>
                    </div>
                `;

                // Evento para expandir/recolher opções
                const toggleBtn = listItem.querySelector('.toggle-btn');
                toggleBtn.addEventListener('click', function() {
                    const optionsDiv = listItem.querySelector('.match-options');
                    const isVisible = optionsDiv.style.display === 'block';
                    optionsDiv.style.display = isVisible ? 'none' : 'block';
                    toggleBtn.textContent = isVisible ? '▼' : '▲';
                });

                matchList.appendChild(listItem);
            });
        })
        .catch(error => console.error('Erro:', error));
        }

        function addPlayer(index) {
        const playerName = prompt('Digite o nome do jogador:');
        const playerPhone = prompt('Digite o telefone do jogador:');
        if (playerName && playerPhone) {
            fetch(`http://localhost:3000/partidas/${index}/jogadores`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    nome: playerName,
                    telefone: playerPhone
                })
            })
            .then(response => response.text())
            .then(data => {
                alert(data);
            })
            .catch(error => console.error('Erro:', error));
        } else {
            alert('Nome e telefone são obrigatórios!');
        }
        }

        function viewPlayers(index) {
        fetch(`http://localhost:3000/partidas/${index}/jogadores`)
        .then(response => response.json())
        .then(jogadores => {
            if (jogadores.length === 0) {
                alert('Nenhum jogador adicionado ainda.');
            } else {
                let playerList = 'Jogadores:\n';
                jogadores.forEach(jogador => {
                    playerList += `- ${jogador.nome} (${jogador.telefone})\n`;
                });
                alert(playerList);
            }
        })
        .catch(error => console.error('Erro:', error));
        }

        function deleteMatch(index) {
        if (confirm('Tem certeza que deseja excluir esta partida?')) {
            fetch(`http://localhost:3000/partidas/${index}`, {
                method: 'DELETE',
            })
            .then(response => response.text())
            .then(data => {
                alert(data);
                fetchMatches(); // Atualiza a lista de partidas
            })
            .catch(error => console.error('Erro:', error));
        }
        }
}

partidas.json {
    [
    {
        "titulo": "Jogo da Cobrinha",
        "local": "Campo Central",
        "data": "2025-02-28",
        "horario": "20:30",
        "jogadores": [
        {
            "nome": "João",
            "telefone": "123456789"
        },
        {
            "nome": "Maria",
            "telefone": "987654321"
        },
        {
            "nome": "José",
            "telefone": "83 98646-1896"
        }
        ]
    },
    {
        "titulo": "Jogo do Leão",
        "local": "Arena Futuro",
        "data": "2025-03-01",
        "horario": "16:00",
        "jogadores": []
    }
    ]
}

server.js {
    const express = require('express');
    const fs = require('fs');
    const path = require('path');
    const cors = require('cors');
    const app = express();

    app.use(cors());
    app.use(express.json());

    const filePath = path.join(__dirname, 'partidas.json');

    // Rota para criar nova partida
    app.post('/criarPartida', (req, res) => {
        let partidas = [];
        if (fs.existsSync(filePath)) {
            partidas = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
        }
        partidas.push({
            ...req.body,
            jogadores: []
        });
        fs.writeFileSync(filePath, JSON.stringify(partidas, null, 2));
        res.status(201).send('Partida criada com sucesso!');
    });

    // Rota para obter todas as partidas
    app.get('/partidas', (req, res) => {
        if (fs.existsSync(filePath)) {
            const partidas = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
            res.json(partidas);
        } else {
            res.json([]);
        }
    });

    // Rota para adicionar jogador a uma partida
    app.post('/partidas/:index/jogadores', (req, res) => {
        const index = req.params.index;
        let partidas = [];
        if (fs.existsSync(filePath)) {
            partidas = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
        }
        if (partidas[index]) {
            partidas[index].jogadores.push(req.body);
            fs.writeFileSync(filePath, JSON.stringify(partidas, null, 2));
            res.send('Jogador adicionado com sucesso!');
        } else {
            res.status(404).send('Partida não encontrada');
        }
    });

    // Rota para obter jogadores de uma partida
    app.get('/partidas/:index/jogadores', (req, res) => {
        const index = req.params.index;
        let partidas = [];
        if (fs.existsSync(filePath)) {
            partidas = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
        }
        if (partidas[index]) {
            const jogadores = partidas[index].jogadores || [];
            res.json(jogadores);
        } else {
            res.status(404).send('Partida não encontrada');
        }
    });

    // Rota para excluir uma partida
    app.delete('/partidas/:index', (req, res) => {
        const index = req.params.index;
        let partidas = [];
        if (fs.existsSync(filePath)) {
            partidas = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
        }
        if (partidas[index]) {
            partidas.splice(index, 1);
            fs.writeFileSync(filePath, JSON.stringify(partidas, null, 2));
            res.send('Partida excluída com sucesso!');
        } else {
            res.status(404).send('Partida não encontrada');
        }
    });

    app.listen(3000, () => {
        console.log('Servidor rodando na porta 3000');
    });
}

style.css {
    body {
        background-color: #77797a;
        color: black;
    }

    .form-control, .list-group-item {
        background-color: #3e4143;
        color: white;
    }

    #matchList {
        width: 50%; /* Define uma largura */
        margin: 0 auto; /* Centraliza horizontalmente */
        list-style: none; /* Remove os estilos padrão da lista */
        padding: 0;
    }

    .match-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .match-options {
        margin-top: 10px;
    }

    .match-options button {
        margin-right: 5px;
    }

    .btn-secondary {
        background-color: #6c757d;
    }

    .container h1, .container h2 {
        color: white;
    }
}